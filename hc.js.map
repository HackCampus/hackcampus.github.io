{
  "version": 3,
  "sources": [
    "node_modules/browser-pack/_prelude.js",
    "client/ConwayTransition/WrappingGrid.js",
    "client/ConwayTransition/index.js",
    "client/ConwayTransition/step.js",
    "client/addThrottledEventListener.js",
    "client/index.js",
    "client/letters/index.js",
    "client/letters/pixels.js"
  ],
  "names": [],
  "mappings": "AAAA;;;;;;;ACAA,IAAM,SAAS,SAAT,MAAS,CAAC,OAAD,EAAU,KAAV;AAAA,SACZ,IAAI,KAAJ,CAAU,KAAV,CAAD,CAAmB,IAAnB,GAA0B,GAA1B,CAA8B,OAA9B,CADa;AAAA,CAAf;;AAIA,OAAO,OAAP;AACE,wBAAa,KAAb,EAAoB,MAApB,EAA2C;AAAA,QAAf,MAAe,uEAAN,IAAM;;AAAA;;AACzC,SAAK,MAAL,GAAc,IAAd;AACA,SAAK,KAAL,GAAa,KAAb;AACA,SAAK,MAAL,GAAc,MAAd;AACA,QAAM,YAAY,UAAU,OAAO;AAAA,aAAK,OAAO;AAAA,eAAK,KAAL;AAAA,OAAP,EAAmB,KAAnB,CAAL;AAAA,KAAP,EAAuC,MAAvC,CAA5B;AACA,SAAK,IAAL,GAAY,SAAZ;AACD;;AAPH;AAAA;AAAA,wBASO,CATP,EASU,CATV,EASa;AACT,aAAO,KAAK,IAAL,CAAU,CAAC,IAAI,KAAK,MAAV,IAAoB,KAAK,MAAnC,EAA2C,CAAC,IAAI,KAAK,KAAV,IAAmB,KAAK,KAAnE,CAAP;AACD;AAXH;AAAA;AAAA,wBAaO,CAbP,EAaU,CAbV,EAa2B;AAAA,UAAd,KAAc,uEAAN,IAAM;;AACvB,WAAK,IAAL,CAAU,CAAC,IAAI,KAAK,MAAV,IAAoB,KAAK,MAAnC,EAA2C,CAAC,IAAI,KAAK,KAAV,IAAmB,KAAK,KAAnE,IAA4E,KAA5E;AACA,aAAO,IAAP;AACD;AAhBH;AAAA;AAAA,0BAkBmC;AAAA,UAA5B,CAA4B,uEAAxB,UAAC,KAAD,EAAQ,CAAR,EAAW,CAAX;AAAA,eAAiB,KAAjB;AAAA,OAAwB;;AAC/B,UAAM,OAAO,KAAK,IAAL,CAAU,GAAV,CAAc,UAAC,IAAD,EAAO,CAAP;AAAA,eAAa,KAAK,GAAL,CAAS,UAAC,KAAD,EAAQ,CAAR;AAAA,iBAAc,EAAE,KAAF,EAAS,CAAT,EAAY,CAAZ,CAAd;AAAA,SAAT,CAAb;AAAA,OAAd,CAAb;AACA,aAAO,IAAI,YAAJ,CAAiB,KAAK,KAAtB,EAA6B,KAAK,MAAlC,EAA0C,IAA1C,CAAP;AACD;AArBH;AAAA;AAAA,8BAuBsC;AAAA,UAA3B,CAA2B,uEAAvB,UAAC,KAAD,EAAQ,CAAR,EAAW,CAAX;AAAA,eAAiB,IAAjB;AAAA,OAAuB;;AAClC,WAAK,IAAL,CAAU,OAAV,CAAkB,UAAC,IAAD,EAAO,CAAP;AAAA,eAAa,KAAK,OAAL,CAAa,UAAC,KAAD,EAAQ,CAAR;AAAA,iBAAc,EAAE,KAAF,EAAS,CAAT,EAAY,CAAZ,CAAd;AAAA,SAAb,CAAb;AAAA,OAAlB;AACD;AAzBH;;AAAA;AAAA;;;;;;;;;ACJA,IAAM,OAAO,QAAQ,gBAAR,CAAb;AACA,IAAM,OAAO,QAAQ,QAAR,CAAb;;IAEM,gB;AACJ,4BAAa,SAAb,EAA4G;AAAA,QAApF,MAAoF,uEAA3E,SAA2E;AAAA,QAAhE,MAAgE,uEAAvD,OAAuD;;AAAA;;AAAA,QAA9C,eAA8C,uEAA5B,OAA4B;AAAA,QAAnB,WAAmB,uEAAL,GAAK;;AAAA;;AAC1G,SAAK,SAAL,GAAiB,SAAjB;AACA,SAAK,MAAL,GAAc,MAAd;AACA,SAAK,MAAL,GAAc,MAAd;AACA,SAAK,eAAL,GAAuB,eAAvB;AACA,SAAK,WAAL,GAAmB,WAAnB;AACA,SAAK,QAAL,GAAgB,GAAhB;AACA,SAAK,YAAL,GAAoB,CAApB;;AAEA,SAAK,WAAL,GAAmB,UAAU,kBAA7B;;AAEA,QAAM,SAAS,SAAS,aAAT,CAAuB,QAAvB,CAAf;AACA,WAAO,KAAP,CAAa,QAAb,GAAwB,OAAxB;AACA,WAAO,KAAP,CAAa,MAAb,GAAsB,GAAtB;AACA,WAAO,KAAP,CAAa,aAAb,GAA6B,MAA7B,CAd0G,CActE;AACpC,SAAK,CAAL,GAAS,OAAO,UAAP,CAAkB,IAAlB,CAAT;AACA,cAAU,WAAV,CAAsB,MAAtB;;AAEA,SAAK,KAAL,GAAa,OAAO,gBAAP,IAA2B,CAAxC;AACA,QAAM,UAAU,SAAV,OAAU,GAAM;AACpB,UAAM,QAAQ,OAAO,UAArB;AACA,UAAM,SAAS,OAAO,WAAtB;AACA,YAAK,KAAL,GAAa,QAAQ,MAAK,KAA1B;AACA,YAAK,MAAL,GAAc,SAAS,MAAK,KAA5B;;AAEA,aAAO,KAAP,GAAe,MAAK,KAApB;AACA,aAAO,MAAP,GAAgB,MAAK,MAArB;AACA,aAAO,KAAP,CAAa,GAAb,GAAmB,CAAnB;AACA,aAAO,KAAP,CAAa,IAAb,GAAoB,CAApB;AACA,aAAO,KAAP,CAAa,KAAb,GAAqB,QAAQ,IAA7B;AACA,aAAO,KAAP,CAAa,MAAb,GAAsB,SAAS,IAA/B;;AAEA,gBAAU,KAAV,CAAgB,MAAhB,GAAyB,SAAS,IAAlC;;AAboB,kCAcN,UAAU,qBAAV,EAdM;AAAA,UAcb,GAda,yBAcb,GAda;;AAepB,YAAK,SAAL,GAAiB,GAAjB;;AAEA,YAAK,iBAAL,GAAyB,MAAK,WAAL,CAAiB,YAA1C;;AAEA,YAAK,SAAL;AACA,aAAO,qBAAP,CAA6B,YAAM;AAAE,cAAK,IAAL;AAAa,OAAlD;AACD,KArBD;AAsBA;AACA,WAAO,gBAAP,CAAwB,QAAxB,EAAkC,OAAlC;;AAEA,QAAM,WAAW,SAAX,QAAW,QAAS;AACxB,UAAM,YAAY,OAAO,OAAP,IAAkB,SAAS,eAAT,CAAyB,SAA3C,IAAwD,SAAS,IAAT,CAAc,SAAtE,IAAmF,CAArG;AACA,UAAM,eAAe,CAAC,YAAY,MAAK,SAAlB,IAA+B,OAAO,WAA3D;AACA,YAAK,YAAL,GAAoB,YAApB;AACA,aAAO,qBAAP,CAA6B,YAAM;AAAE,cAAK,IAAL;AAAa,OAAlD;AACD,KALD;AAMA;AACA,WAAO,gBAAP,CAAwB,QAAxB,EAAkC,QAAlC;AAED;;;;gCAEY;AAAA;;AACX,WAAK,SAAL,GAAiB,KAAK,IAAL,CAAU,KAAK,KAAL,GAAa,KAAK,QAA5B,IAAwC,CAAzD;AACA,WAAK,UAAL,GAAkB,KAAK,IAAL,CAAU,KAAK,MAAL,GAAc,KAAK,QAA7B,IAAyC,CAA3D;;AAEA,UAAM,OAAO,SAAP,IAAO;AAAA,eAAM,IAAI,IAAJ,CAAS,OAAK,SAAd,EAAyB,OAAK,UAA9B,CAAN;AAAA,OAAb;;AAEA;AANW,UAOJ,CAPI,GAOK,KAAK,KAAL,CAAW,KAAK,SAAL,GAAiB,CAA5B,IAAiC,CAPtC;AAAA,UAOD,CAPC,GAOyC,KAAK,KAAL,CAAW,KAAK,UAAL,GAAkB,CAA7B,IAAkC,CAP3E;;;AASX,UAAI,QAAQ,MAAZ;AACA,UAAI,QAAQ,MAAZ;AACA,UAAI,QAAQ,MAAZ;;AAEA,YAAM,GAAN,CAAU,IAAE,CAAZ,EAAe,IAAE,CAAjB,EACM,GADN,CACU,IAAE,CADZ,EACe,CADf,EACoB,GADpB,CACwB,CADxB,EAC6B,CAD7B,EAEM,GAFN,CAEU,IAAE,CAFZ,EAEe,IAAE,CAFjB,EAEkC,GAFlC,CAEsC,IAAE,CAFxC,EAE2C,IAAE,CAF7C;;AAIA,YAAkC,GAAlC,CAAsC,IAAE,CAAxC,EAA2C,CAA3C,EAAgD,GAAhD,CAAoD,IAAE,CAAtD,EAAyD,CAAzD,EACoB,GADpB,CACwB,CADxB,EAC6B,IAAE,CAD/B,EAEkC,GAFlC,CAEsC,IAAE,CAFxC,EAE2C,IAAE,CAF7C,EAEgD,GAFhD,CAEoD,IAAE,CAFtD,EAEyD,IAAE,CAF3D;;AAIA,WAAK,MAAL,GAAc,CAAC,KAAD,CAAd;AACA,WAAK,MAAL,GAAc,CAAC,KAAD,CAAd;AACA,WAAK,MAAL,GAAc,CAAC,KAAD,CAAd;;AAEA,WAAK,IAAI,IAAI,CAAb,EAAgB,IAAI,KAAK,WAAzB,EAAsC,GAAtC,EAA2C;AACzC,gBAAQ,KAAK,KAAL,CAAR;AACA,gBAAQ,KAAK,KAAL,CAAR;AACA,gBAAQ,MAAM,GAAN,CAAU,UAAC,YAAD,EAAe,CAAf,EAAkB,CAAlB,EAAwB;AACxC,cAAM,OAAO,MAAM,GAAN,CAAU,CAAV,EAAa,CAAb,CAAb;AACA,iBAAO,gBAAgB,IAAvB;AACD,SAHO,CAAR;AAIA,aAAK,MAAL,CAAY,IAAZ,CAAiB,KAAjB;AACA,aAAK,MAAL,CAAY,IAAZ,CAAiB,KAAjB;AACA,aAAK,MAAL,CAAY,IAAZ,CAAiB,KAAjB;AACD;AACF;;;2BAEO;AAAA;;AACN,WAAK,WAAL,CAAiB,KAAjB,GAAyB,EAAzB;;AAEA,WAAK,CAAL,CAAO,SAAP,CAAiB,CAAjB,EAAoB,CAApB,EAAuB,KAAK,KAAL,GAAa,KAAK,KAAzC,EAAgD,KAAK,MAAL,GAAc,KAAK,KAAnE;;AAEA,UAAM,mBAAmB,EAAE,KAAK,KAAL,GAAa,KAAK,QAApB,IAAgC,CAAzD;AACA,UAAM,kBAAkB,EAAE,KAAK,MAAL,GAAc,KAAK,QAArB,IAAiC,CAAzD;AACA,UAAM,WAAW,SAAX,QAAW,CAAC,CAAD,EAAI,CAAJ,EAAO,KAAP,EAAiB;AAChC,eAAK,CAAL,CAAO,SAAP,GAAmB,KAAnB;AACA,eAAK,CAAL,CAAO,QAAP,CAAgB,mBAAmB,IAAI,OAAK,QAA5C,EAAsD,kBAAkB,IAAI,OAAK,QAAjF,EAA2F,OAAK,QAAhG,EAA0G,OAAK,QAA/G;AACD,OAHD;;AAKA,UAAM,iBAAiB,SAAjB,cAAiB,GAAM;AAC3B,eAAK,WAAL,CAAiB,KAAjB,CAAuB,QAAvB,GAAkC,OAAlC;AACA,eAAK,WAAL,CAAiB,KAAjB,CAAuB,GAAvB,GAA6B,CAA7B;AACA,eAAK,WAAL,CAAiB,KAAjB,CAAuB,IAAvB,GAA8B,CAA9B;AACA,eAAK,WAAL,CAAiB,KAAjB,CAAuB,KAAvB,GAA+B,MAA/B;AACA,eAAK,SAAL,CAAe,KAAf,CAAqB,MAArB,qBAA8C,OAAK,iBAAnD;AACD,OAND;;AAQA,UAAM,sBAAsB,SAAtB,mBAAsB,GAAM;AAChC,eAAK,WAAL,CAAiB,KAAjB,GAAyB,EAAzB;AACA,eAAK,SAAL,CAAe,KAAf,CAAqB,MAArB,GAA8B,OAA9B;AACA,eAAK,SAAL,CAAe,KAAf,CAAqB,eAArB,GAAuC,OAAK,eAA5C;AACD,OAJD;;AAMA,UAAM,YAAY,KAAK,YAAL,GAAoB,CAAC,CAArB,IAA0B,KAAK,YAAL,IAAqB,CAAjE;AACA,UAAI,SAAJ,EAAe;AACb;AACA,aAAK,CAAL,CAAO,WAAP,GAAqB,CAArB;AACA;AACD;;AAED,UAAI,aAAa,CAAjB;AAAA,UAAoB,QAAQ,CAA5B;AACA,UAAI,KAAK,YAAL,IAAqB,CAAC,CAAtB,IAA2B,KAAK,YAAL,GAAoB,CAAnD,EAAsD;AACpD;;AAEA,gBAAQ,KAAK,GAAL,CAAS,KAAK,YAAL,GAAoB,CAA7B,EAAgC,CAAhC,CAAR;AACA,qBAAa,CAAb;AACD,OALD,MAKO,IAAI,KAAK,YAAL,IAAqB,CAArB,IAA0B,KAAK,YAAL,GAAoB,CAAlD,EAAqD;AAC1D;;AAEA,aAAK,CAAL,CAAO,IAAP;AACA,aAAK,CAAL,CAAO,WAAP,GAAqB,KAAK,GAAL,CAAS,IAAI,KAAK,YAAlB,EAAgC,CAAhC,CAArB;AACA,aAAK,CAAL,CAAO,SAAP,GAAmB,KAAK,eAAxB;AACA,aAAK,CAAL,CAAO,QAAP,CAAgB,CAAhB,EAAmB,CAAnB,EAAsB,KAAK,KAAL,GAAa,KAAK,KAAxC,EAA+C,KAAK,MAAL,GAAc,KAAK,KAAlE;AACA,aAAK,CAAL,CAAO,OAAP;;AAEA,gBAAQ,IAAI,KAAK,GAAL,CAAS,KAAK,YAAd,EAA4B,CAA5B,CAAZ;AACA,qBAAa,KAAK,KAAL,CAAW,KAAK,YAAL,GAAoB,KAAK,WAApC,CAAb;AACD;AACD,WAAK,CAAL,CAAO,WAAP,GAAqB,KAArB;;AAEA,UAAM,QAAQ,KAAK,MAAL,CAAY,UAAZ,CAAd;AACA,UAAM,QAAQ,KAAK,MAAL,CAAY,UAAZ,CAAd;AACA,UAAM,QAAQ,KAAK,MAAL,CAAY,UAAZ,CAAd;AACA,WAAK,IAAI,IAAI,CAAb,EAAgB,IAAI,KAAK,UAAzB,EAAqC,GAArC,EAA0C;AACxC,aAAK,IAAI,IAAI,CAAb,EAAgB,IAAI,KAAK,SAAzB,EAAoC,GAApC,EAAyC;AACvC,cAAM,IAAI,MAAM,GAAN,CAAU,CAAV,EAAa,CAAb,CAAV;AACA,cAAI,CAAJ,EAAO;AACL,qBAAS,CAAT,EAAY,CAAZ,EAAe,KAAK,MAApB;AACA;AACD;AACD,cAAM,IAAI,MAAM,GAAN,CAAU,CAAV,EAAa,CAAb,CAAV;AACA,cAAI,CAAJ,EAAO;AACL,qBAAS,CAAT,EAAY,CAAZ,EAAe,KAAK,MAApB;AACA;AACD;AACD,cAAM,eAAe,MAAM,GAAN,CAAU,CAAV,EAAa,CAAb,CAArB;AACA,cAAI,CAAC,YAAL,EAAmB;AACjB,qBAAS,CAAT,EAAY,CAAZ,EAAe,KAAK,eAApB;AACA;AACD;AACF;AACF;AACF;;;;;;AAGH,OAAO,OAAP,GAAiB,gBAAjB;;;;;AC/KA,OAAO,OAAP,GAAiB,SAAS,IAAT,CAAe,IAAf,EAAqB;AACpC,MAAI,CAAC,KAAK,MAAV,EAAkB;AAChB,YAAQ,KAAR,CAAc,uBAAd;AACA;AACD;AACD,WAAS,SAAT,CAAoB,CAApB,EAAuB,CAAvB,EAA0B;AACxB,WAAO,CAAE,KAAK,GAAL,CAAS,IAAI,CAAb,EAAgB,IAAI,CAApB,CAAF,EAA0B,KAAK,GAAL,CAAS,CAAT,EAAc,IAAI,CAAlB,CAA1B,EAAgD,KAAK,GAAL,CAAS,IAAI,CAAb,EAAgB,IAAI,CAApB,CAAhD,EACE,KAAK,GAAL,CAAS,IAAI,CAAb,EAAgB,CAAhB,CADF,GACgD,KAAK,GAAL,CAAS,IAAI,CAAb,EAAgB,CAAhB,CADhD,EAEE,KAAK,GAAL,CAAS,IAAI,CAAb,EAAgB,IAAI,CAApB,CAFF,EAE0B,KAAK,GAAL,CAAS,CAAT,EAAc,IAAI,CAAlB,CAF1B,EAEgD,KAAK,GAAL,CAAS,IAAI,CAAb,EAAgB,IAAI,CAApB,CAFhD,CAAP;AAGD;AACD,SAAO,KAAK,GAAL,CAAS,UAAC,KAAD,EAAQ,CAAR,EAAW,CAAX,EAAiB;AAC/B,QAAM,QAAQ,UAAU,CAAV,EAAa,CAAb,EAAgB,MAAhB,CAAuB;AAAA,aAAU,MAAV;AAAA,KAAvB,EAAyC,MAAvD;AACA,WAAO,QACH,SAAS,CAAT,IAAc,SAAS,CADpB,GAEH,SAAS,CAFb;AAGD,GALM,CAAP;AAMD,CAhBD;;;;;ACAA,OAAO,OAAP,GAAiB,SAAS,yBAAT,CAAoC,SAApC,EAA+C,QAA/C,EAA0E;AAAA,MAAjB,MAAiB,uEAAR,MAAQ;;AACzF,MAAI,aAAa,KAAjB;AACA,SAAO,gBAAP,CAAwB,SAAxB,EAAmC,UAAU,KAAV,EAAiB;AAClD,QAAI,UAAJ,EAAgB;AAChB,iBAAa,IAAb;AACA,WAAO,qBAAP,CAA6B,YAAY;AACvC,eAAS,KAAT;AACA,mBAAa,KAAb;AACD,KAHD;AAID,GAPD;AAQD,CAVD;;;;;ACAA,IAAM,4BAA4B,QAAQ,6BAAR,CAAlC;AACA,IAAM,mBAAmB,QAAQ,oBAAR,CAAzB;AACA,IAAM,UAAU,QAAQ,WAAR,CAAhB;;AAEA,SAAS,CAAT,CAAY,QAAZ,EAAsB;AACpB,SAAO,GAAG,KAAH,CAAS,IAAT,CAAc,SAAS,gBAAT,CAA0B,QAA1B,CAAd,CAAP;AACD;;AAED,SAAS,IAAT,GAAiB;AACf,MAAM,cAAc,EAAE,aAAF,CAApB;AACA,cAAY,GAAZ,CAAgB,sBAAc;AAAA,8BACc,WAAW,OADzB;AAAA,QACrB,MADqB,uBACrB,MADqB;AAAA,QACb,MADa,uBACb,MADa;AAAA,QACL,eADK,uBACL,eADK;;AAE5B,WAAO,IAAI,gBAAJ,CAAqB,UAArB,EAAiC,MAAjC,EAAyC,MAAzC,EAAiD,eAAjD,CAAP;AACD,GAHD;AAID;AACD,SAAS,gBAAT,CAA0B,kBAA1B,EAA8C,IAA9C;;;;;;;;;ACfA,IAAM,SAAS,QAAQ,UAAR,CAAf;;AAEA,SAAS,UAAT,CAAqB,KAArB,EAA4B;AAC1B,SAAO,MAAM,KAAK,KAAL,CAAW,KAAK,MAAL,MAAiB,MAAM,MAAN,GAAe,CAAhC,CAAX,CAAN,CAAP;AACD;;IAEK,O;AACJ,mBAAa,SAAb,EAAuD;AAAA;;AAAA,QAA/B,IAA+B,uEAAxB,YAAwB;AAAA,QAAV,GAAU,uEAAJ,EAAI;;AAAA;;AACrD,SAAK,IAAL,GAAY,IAAZ;AACA,SAAK,GAAL,GAAW,GAAX;;AAEA,SAAK,KAAL,GAAa,KAAK,QAAL,EAAb;;AAEA,QAAM,SAAS,SAAS,aAAT,CAAuB,QAAvB,CAAf;AACA,SAAK,CAAL,GAAS,OAAO,UAAP,CAAkB,IAAlB,CAAT;AACA,cAAU,WAAV,CAAsB,MAAtB;;AAEA,SAAK,KAAL,GAAa,OAAO,gBAAP,IAA2B,CAAxC;AACA,QAAM,UAAU,SAAV,OAAU,GAAM;AACpB,UAAM,QAAQ,UAAU,WAAxB;AACA,UAAM,SAAS,QAAQ,MAAK,IAAL,CAAU,MAAjC,CAFoB,CAEoB;AACxC,YAAK,KAAL,GAAa,KAAb;AACA,YAAK,MAAL,GAAc,MAAd;AACA,aAAO,KAAP,GAAe,QAAQ,MAAK,KAA5B;AACA,aAAO,MAAP,GAAgB,SAAS,MAAK,KAA9B;AACA,aAAO,KAAP,CAAa,KAAb,GAAqB,QAAQ,IAA7B;AACA,aAAO,KAAP,CAAa,MAAb,GAAsB,SAAS,IAA/B;AACA,aAAO,qBAAP,CAA6B,YAAM;AAAE,cAAK,IAAL;AAAa,OAAlD;AACD,KAVD;AAWA;AACA,WAAO,gBAAP,CAAwB,QAAxB,EAAkC,OAAlC;AACD;;;;4BAEQ;AAAA;;AACP,WAAK,OAAL,GAAe,IAAf;AACA,UAAM,SAAS,SAAT,MAAS,GAAM;AACnB,YAAI,CAAC,OAAK,OAAV,EAAmB;AACnB,eAAK,KAAL,GAAa,OAAK,QAAL,EAAb;AACA,eAAK,IAAL;AACA,eAAO,UAAP,CAAkB,YAAM;AACtB;AACA,iBAAO,qBAAP,CAA6B,MAA7B;AACD,SAHD,EAGG,OAAO,OAAK,GAHf;AAID,OARD;AASA,aAAO,qBAAP,CAA6B,MAA7B;AACD;;;2BAEO;AACN,WAAK,OAAL,GAAe,KAAf;AACD;;;+BAEW;AACV,aAAO,GAAG,GAAH,CAAO,IAAP,CAAY,KAAK,IAAjB,EAAuB;AAAA,eAAU,WAAW,OAAO,MAAP,CAAX,CAAV;AAAA,OAAvB,CAAP;AACD;;;2BAEO;AAAA;;AACN,UAAM,aAAa,CAAnB,CADM,CACe;AACrB,UAAM,YAAY,KAAK,KAAL,CAAW,KAAK,MAAL,GAAc,KAAK,KAAnB,GAA2B,UAAtC,CAAlB,CAFM,CAE8D;;AAEpE,WAAK,CAAL,CAAO,SAAP,CAAiB,CAAjB,EAAoB,CAApB,EAAuB,KAAK,KAAL,GAAa,KAAK,KAAzC,EAAgD,KAAK,MAAL,GAAc,KAAK,KAAnE;;AAEA,WAAK,CAAL,CAAO,SAAP,GAAmB,OAAnB;AACA,UAAM,YAAY,SAAZ,SAAY,CAAC,CAAD,EAAI,CAAJ,EAAU;AAC1B,eAAK,CAAL,CAAO,QAAP,CAAgB,IAAI,SAApB,EAA+B,IAAI,SAAnC,EAA8C,SAA9C,EAAyD,SAAzD;AACD,OAFD;;AAIA,UAAI,SAAS,CAAb;AAXM;AAAA;AAAA;;AAAA;AAYN,6BAAmB,KAAK,KAAxB,8HAA+B;AAAA,cAAtB,MAAsB;;AAC7B,cAAI,IAAI,CAAR;AAD6B;AAAA;AAAA;;AAAA;AAE7B,kCAAkB,MAAlB,mIAA0B;AAAA,kBAAjB,KAAiB;;AACxB,kBAAI,UAAU,GAAd,EAAmB;AACjB,oBAAM,IAAI,IAAI,UAAd;AACA,oBAAM,IAAI,KAAK,KAAL,CAAW,IAAI,UAAf,CAAV;AACA,0BAAU,SAAS,CAAnB,EAAsB,CAAtB;AACD;AACD;AACD;AAT4B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAU7B,oBAAU,UAAV;AACD;AAvBK;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAwBP;;;;;;AAGH,OAAO,OAAP,GAAiB,OAAjB;;;;;AClFA,OAAO,OAAP,GACA,EAAE,GACC,CAAE,kEAAF,EACE,kEADF,EAEE,kEAFF,EAGE,kEAHF,EAIE,kEAJF,EAKE,kEALF,EAME,kEANF,EAOE,kEAPF,EAQE,kEARF,CADH;AAUE,MACC,CAAE,kEAAF,EACE,kEADF,EAEE,kEAFF,EAGE,kEAHF,EAIE,kEAJF,EAKE,kEALF,EAME,kEANF,EAOE,kEAPF,EAQE,kEARF,CAXH;AAoBE,MACC,CAAE,kEAAF,EACE,kEADF,EAEE,kEAFF,EAGE,kEAHF,EAIE,kEAJF,EAKE,kEALF,EAME,kEANF,EAOE,kEAPF,EAQE,kEARF,CArBH;AA8BE,MACC,CAAE,kEAAF,EACE,kEADF,EAEE,kEAFF,EAGE,kEAHF,EAIE,kEAJF,EAKE,kEALF,EAME,kEANF,EAOE,kEAPF,EAQE,kEARF,CA/BH;AAwCE,MACC,CAAE,kEAAF,EACE,kEADF,EAEE,kEAFF,EAGE,kEAHF,EAIE,kEAJF,EAKE,kEALF,EAME,kEANF,EAOE,kEAPF,EAQE,kEARF,CAzCH;AAkDE,MACC,CAAE,kEAAF,EACE,kEADF,EAEE,kEAFF,EAGE,kEAHF,EAIE,kEAJF,EAKE,kEALF,EAME,kEANF,EAOE,kEAPF,EAQE,kEARF,CAnDH;AA4DE,MACC,CAAE,kEAAF,EACE,kEADF,EAEE,kEAFF,EAGE,kEAHF,EAIE,kEAJF,EAKE,kEALF,EAME,kEANF,EAOE,kEAPF,EAQE,kEARF,CA7DH;AAsEE,MACC,CAAE,kEAAF,EACE,kEADF,EAEE,kEAFF,EAGE,kEAHF,EAIE,kEAJF,EAKE,kEALF,EAME,kEANF,EAOE,kEAPF,EAQE,kEARF,CAvEH;AAgFE,MACC,CAAE,kEAAF,EACE,kEADF,EAEE,kEAFF,EAGE,kEAHF,EAIE,kEAJF,EAKE,kEALF,EAME,kEANF,EAOE,kEAPF,EAQE,kEARF,CAjFH;AA0FE,MACC,CAAE,kEAAF,EACE,kEADF,EAEE,kEAFF,EAGE,kEAHF,EAIE,kEAJF,EAKE,kEALF,EAME,kEANF,EAOE,kEAPF,EAQE,kEARF,CA3FH;AAoGE,MACC,CAAE,kEAAF,EACE,kEADF,EAEE,kEAFF,EAGE,kEAHF,EAIE,kEAJF,EAKE,kEALF,EAME,kEANF,EAOE,kEAPF,EAQE,kEARF,CArGH;AA8GE,MACC,CAAE,kEAAF,EACE,kEADF,EAEE,kEAFF,EAGE,kEAHF,EAIE,kEAJF,EAKE,kEALF,EAME,kEANF,EAOE,kEAPF,EAQE,kEARF,CA/GH;AAwHE,MACC,CAAE,kEAAF,EACE,kEADF,EAEE,kEAFF,EAGE,kEAHF,EAIE,kEAJF,EAKE,kEALF,EAME,kEANF,EAOE,kEAPF,EAQE,kEARF,CAzHH;AAkIE,MACC,CAAE,kEAAF,EACE,kEADF,EAEE,kEAFF,EAGE,kEAHF,EAIE,kEAJF,EAKE,kEALF,EAME,kEANF,EAOE,kEAPF,EAQE,kEARF,CAnIH;AA4IE,MACC,CAAE,kEAAF,EACE,kEADF,EAEE,kEAFF,EAGE,kEAHF,EAIE,kEAJF,EAKE,kEALF,EAME,kEANF,EAOE,kEAPF,EAQE,kEARF,CA7IH;AAsJE,MACC,CAAE,kEAAF,EACE,kEADF,EAEE,kEAFF,EAGE,kEAHF,EAIE,kEAJF,EAKE,kEALF,EAME,kEANF,EAOE,kEAPF,EAQE,kEARF,CAvJH;AAgKE,MACC,CAAE,kEAAF,EACE,kEADF,EAEE,kEAFF,EAGE,kEAHF,EAIE,kEAJF,EAKE,kEALF,EAME,kEANF,EAOE,kEAPF,EAQE,kEARF,CAjKH;AA0KE,MACC,CAAE,kEAAF,EACE,kEADF,EAEE,kEAFF,EAGE,kEAHF,EAIE,kEAJF,EAKE,kEALF,EAME,kEANF,EAOE,kEAPF,EAQE,kEARF,CA3KH;AAoLE,MACC,CAAE,kEAAF,EACE,kEADF,EAEE,kEAFF,EAGE,kEAHF,EAIE,kEAJF,EAKE,kEALF,EAME,kEANF,EAOE,kEAPF,EAQE,kEARF,CArLH;AA8LE,MACC,CAAE,kEAAF,EACE,kEADF,EAEE,kEAFF,EAGE,kEAHF,EAIE,kEAJF,EAKE,kEALF,EAME,kEANF,EAOE,kEAPF,EAQE,kEARF,CA/LH;AAwME,MACC,CAAE,kEAAF,EACE,kEADF,EAEE,kEAFF,EAGE,kEAHF,EAIE,kEAJF,EAKE,kEALF,EAME,kEANF,EAOE,kEAPF,EAQE,kEARF,CAzMH;AAkNE,MACC,CAAE,kEAAF,EACE,kEADF,EAEE,kEAFF,EAGE,kEAHF,EAIE,kEAJF,EAKE,kEALF,EAME,kEANF,EAOE,kEAPF,EAQE,kEARF,CAnNH;AA4NE,MACC,CAAE,kEAAF,EACE,kEADF,EAEE,kEAFF,EAGE,kEAHF,EAIE,kEAJF,EAKE,kEALF,EAME,kEANF,EAOE,kEAPF,EAQE,kEARF,CA7NH;AAsOE,MACC,CAAE,kEAAF,EACE,kEADF,EAEE,kEAFF,EAGE,kEAHF,EAIE,kEAJF,EAKE,kEALF,EAME,kEANF,EAOE,kEAPF,EAQE,kEARF,CAvOH;AAgPE,MACC,CAAE,kEAAF,EACE,kEADF,EAEE,kEAFF,EAGE,kEAHF,EAIE,kEAJF,EAKE,kEALF,EAME,kEANF,EAOE,kEAPF,EAQE,kEARF,CAjPH;AA0PE,MACC,CAAE,kEAAF,EACE,kEADF,EAEE,kEAFF,EAGE,kEAHF,EAIE,kEAJF,EAKE,kEALF,EAME,kEANF,EAOE,kEAPF,EAQE,kEARF,CA3PH;AAoQE,QAAK,CAAC,kEAAD;AApQP,CADA",
  "file": "generated.js",
  "sourceRoot": "",
  "sourcesContent": [
    "(function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require==\"function\"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error(\"Cannot find module '\"+o+\"'\");throw f.code=\"MODULE_NOT_FOUND\",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require==\"function\"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})",
    "const repeat = (valueFn, times) =>\n  (new Array(times)).fill().map(valueFn)\n\n\nmodule.exports = class WrappingGrid {\n  constructor (width, height, values = null) {\n    this.isGrid = true\n    this.width = width\n    this.height = height\n    const emptyGrid = values || repeat(_ => repeat(_ => false, width), height)\n    this.grid = emptyGrid\n  }\n\n  get (x, y) {\n    return this.grid[(y + this.height) % this.height][(x + this.width) % this.width]\n  }\n\n  set (x, y, value = true) {\n    this.grid[(y + this.height) % this.height][(x + this.width) % this.width] = value\n    return this\n  }\n\n  map (f = (value, x, y) => false) {\n    const grid = this.grid.map((rows, y) => rows.map((value, x) => f(value, x, y)))\n    return new WrappingGrid(this.width, this.height, grid)\n  }\n\n  forEach (f = (value, x, y) => null) {\n    this.grid.forEach((rows, y) => rows.forEach((value, x) => f(value, x, y)))\n  }\n}\n",
    "const Grid = require('./WrappingGrid')\nconst step = require('./step')\n\nclass ConwayTransition {\n  constructor (container, hColor = '#ff9600', cColor = 'white', backgroundColor = 'black', generations = 128) {\n    this.container = container\n    this.hColor = hColor\n    this.cColor = cColor\n    this.backgroundColor = backgroundColor\n    this.generations = generations\n    this.cellSize = 120\n    this.scrollAmount = 0\n\n    this.nextElement = container.nextElementSibling\n\n    const canvas = document.createElement('canvas')\n    canvas.style.position = 'fixed'\n    canvas.style.zIndex = '1'\n    canvas.style.pointerEvents = 'none' // allow click through\n    this.c = canvas.getContext('2d')\n    container.appendChild(canvas)\n\n    this.scale = window.devicePixelRatio || 1\n    const setSize = () => {\n      const width = window.innerWidth\n      const height = window.innerHeight\n      this.width = width * this.scale\n      this.height = height * this.scale\n\n      canvas.width = this.width\n      canvas.height = this.height\n      canvas.style.top = 0\n      canvas.style.left = 0\n      canvas.style.width = width + 'px'\n      canvas.style.height = height + 'px'\n\n      container.style.height = height + 'px'\n      const {top} = container.getBoundingClientRect()\n      this.offsetTop = top\n\n      this.nextElementHeight = this.nextElement.clientHeight\n\n      this.makeGames()\n      window.requestAnimationFrame(() => { this.draw() })\n    }\n    setSize()\n    window.addEventListener('resize', setSize)\n\n    const onScroll = event => {\n      const scrollTop = window.scrollY || document.documentElement.scrollTop || document.body.scrollTop || 0\n      const scrollAmount = (scrollTop - this.offsetTop) / window.innerHeight\n      this.scrollAmount = scrollAmount\n      window.requestAnimationFrame(() => { this.draw() })\n    }\n    onScroll()\n    window.addEventListener('scroll', onScroll)\n\n  }\n\n  makeGames () {\n    this.gameWidth = Math.ceil(this.width / this.cellSize) + 2\n    this.gameHeight = Math.ceil(this.height / this.cellSize) + 2\n\n    const grid = () => new Grid(this.gameWidth, this.gameHeight)\n\n    // center\n    const [x, y] = [Math.floor(this.gameWidth / 2) - 2, Math.floor(this.gameHeight / 2) - 3]\n\n    let hGame = grid()\n    let cGame = grid()\n    let trail = grid()\n\n    hGame.set(x-1, y-1)\n         .set(x-1, y  ).set(x  , y  )\n         .set(x-1, y+1)              .set(x+1, y+1)\n\n    cGame                            .set(x+1, y  ).set(x+2, y  )\n                       .set(x  , y+1)\n                                     .set(x+1, y+2).set(x+2, y+2)\n\n    this.hGames = [hGame]\n    this.cGames = [cGame]\n    this.trails = [trail]\n\n    for (let i = 1; i < this.generations; i++) {\n      hGame = step(hGame)\n      cGame = step(cGame)\n      trail = trail.map((alreadyAlive, x, y) => {\n        const born = hGame.get(x, y)\n        return alreadyAlive || born\n      })\n      this.hGames.push(hGame)\n      this.cGames.push(cGame)\n      this.trails.push(trail)\n    }\n  }\n\n  draw () {\n    this.nextElement.style = {}\n\n    this.c.clearRect(0, 0, this.width * this.scale, this.height * this.scale)\n\n    const centerOffsetLeft = -(this.width % this.cellSize) / 2\n    const centerOffsetTop = -(this.height % this.cellSize) / 2\n    const drawCell = (x, y, color) => {\n      this.c.fillStyle = color\n      this.c.fillRect(centerOffsetLeft + x * this.cellSize, centerOffsetTop + y * this.cellSize, this.cellSize, this.cellSize)\n    }\n\n    const fixNextElement = () => {\n      this.nextElement.style.position = 'fixed'\n      this.nextElement.style.top = 0\n      this.nextElement.style.left = 0\n      this.nextElement.style.width = '100%'\n      this.container.style.height = `calc(100vh + ${this.nextElementHeight}px)`\n    }\n\n    const resetFexNixtElement = () => {\n      this.nextElement.style = {}\n      this.container.style.height = '100vh'\n      this.container.style.backgroundColor = this.backgroundColor\n    }\n\n    const offScreen = this.scrollAmount < -1 || this.scrollAmount >= 1\n    if (offScreen) {\n      resetFexNixtElement()\n      this.c.globalAlpha = 0\n      return\n    }\n\n    let generation = 0, alpha = 0\n    if (this.scrollAmount >= -1 && this.scrollAmount < 0) {\n      resetFexNixtElement()\n\n      alpha = Math.pow(this.scrollAmount + 1, 4)\n      generation = 0\n    } else if (this.scrollAmount >= 0 && this.scrollAmount < 1) {\n      fixNextElement()\n\n      this.c.save()\n      this.c.globalAlpha = Math.pow(1 - this.scrollAmount, 4)\n      this.c.fillStyle = this.backgroundColor\n      this.c.fillRect(0, 0, this.width * this.scale, this.height * this.scale)\n      this.c.restore()\n\n      alpha = 1 - Math.pow(this.scrollAmount, 4)\n      generation = Math.floor(this.scrollAmount * this.generations)\n    }\n    this.c.globalAlpha = alpha\n\n    const hGame = this.hGames[generation]\n    const cGame = this.cGames[generation]\n    const trail = this.trails[generation]\n    for (let y = 0; y < this.gameHeight; y++) {\n      for (let x = 0; x < this.gameWidth; x++) {\n        const c = cGame.get(x, y)\n        if (c) {\n          drawCell(x, y, this.cColor)\n          continue\n        }\n        const h = hGame.get(x, y)\n        if (h) {\n          drawCell(x, y, this.hColor)\n          continue\n        }\n        const alreadyAlive = trail.get(x, y)\n        if (!alreadyAlive) {\n          drawCell(x, y, this.backgroundColor)\n          continue\n        }\n      }\n    }\n  }\n}\n\nmodule.exports = ConwayTransition\n",
    "module.exports = function step (grid) {\n  if (!grid.isGrid) {\n    console.error('grid is not a grid g.')\n    return\n  }\n  function neighbors (x, y) {\n    return [ grid.get(x - 1, y - 1), grid.get(x  , y - 1), grid.get(x + 1, y - 1)\n           , grid.get(x - 1, y    ),                     , grid.get(x + 1, y    )\n           , grid.get(x - 1, y + 1), grid.get(x  , y + 1), grid.get(x + 1, y + 1) ]\n  }\n  return grid.map((alive, x, y) => {\n    const lives = neighbors(x, y).filter(living => living).length\n    return alive\n      ? lives == 2 || lives == 3\n      : lives == 3\n  })\n}\n",
    "module.exports = function addThrottledEventListener (eventName, listener, target = window) {\n  var inProgress = false\n  target.addEventListener(eventName, function (event) {\n    if (inProgress) return\n    inProgress = true\n    window.requestAnimationFrame(function () {\n      listener(event)\n      inProgress = false\n    })\n  })\n}\n",
    "const addThrottledEventListener = require('./addThrottledEventListener')\nconst ConwayTransition = require('./ConwayTransition')\nconst Letters = require('./letters')\n\nfunction $ (selector) {\n  return [].slice.call(document.querySelectorAll(selector))\n}\n\nfunction main () {\n  const transitions = $('.transition')\n  transitions.map(transition => {\n    const {hColor, cColor, backgroundColor} = transition.dataset\n    return new ConwayTransition(transition, hColor, cColor, backgroundColor)\n  })\n}\ndocument.addEventListener('DOMContentLoaded', main)\n",
    "const pixels = require('./pixels')\n\nfunction randomItem (array) {\n  return array[Math.round(Math.random() * (array.length - 1))]\n}\n\nclass Letters {\n  constructor (container, text = 'HACKCAMPUS', fps = 10) {\n    this.text = text\n    this.fps = fps\n\n    this.state = this.getState()\n\n    const canvas = document.createElement('canvas')\n    this.c = canvas.getContext('2d')\n    container.appendChild(canvas)\n\n    this.scale = window.devicePixelRatio || 1\n    const setSize = () => {\n      const width = container.clientWidth\n      const height = width / this.text.length // square letters\n      this.width = width\n      this.height = height\n      canvas.width = width * this.scale\n      canvas.height = height * this.scale\n      canvas.style.width = width + 'px'\n      canvas.style.height = height + 'px'\n      window.requestAnimationFrame(() => { this.draw() })\n    }\n    setSize()\n    window.addEventListener('resize', setSize)\n  }\n\n  start () {\n    this.started = true\n    const render = () => {\n      if (!this.started) return\n      this.state = this.getState()\n      this.draw()\n      window.setTimeout(() => {\n        // this.fps /= 1.1\n        window.requestAnimationFrame(render)\n      }, 1000 / this.fps)\n    }\n    window.requestAnimationFrame(render)\n  }\n\n  stop () {\n    this.started = false\n  }\n\n  getState () {\n    return [].map.call(this.text, letter => randomItem(pixels[letter]))\n  }\n\n  draw () {\n    const letterSize = 8 // letter pixels\n    const pixelSize = Math.floor(this.height * this.scale / letterSize) // screen pixels\n\n    this.c.clearRect(0, 0, this.width * this.scale, this.height * this.scale)\n\n    this.c.fillStyle = 'white'\n    const drawPixel = (x, y) => {\n      this.c.fillRect(x * pixelSize, y * pixelSize, pixelSize, pixelSize)\n    }\n\n    let offset = 0\n    for (let letter of this.state) {\n      let i = 0\n      for (let pixel of letter) {\n        if (pixel === '1') {\n          const x = i % letterSize\n          const y = Math.floor(i / letterSize)\n          drawPixel(offset + x, y)\n        }\n        i++\n      }\n      offset += letterSize\n    }\n  }\n}\n\nmodule.exports = Letters\n",
    "module.exports =\n{ A:\n   [ '0000000001111111011111110111111101111111010000010111111101000001',\n     '0000000001111111011100010111000101110001011111110111000101110001',\n     '0000000001111100010000100100000101000001011111110100000101000001',\n     '0000000001111111010000010101110101000001010111010101010101110111',\n     '0000000001111111010000010100000101111111010000010100000101000001',\n     '0000000001111111010000010100000101000001010000010111111101000001',\n     '0000000001111111000000010000000101111111010000010100000101111111',\n     '0000000000001111000100010010000101000001010000010111111101000001',\n     '0000000000011100001000100100000101000001011111110100000101000001' ],\n  B:\n   [ '0000000001111110011110100111111101111001011110010111100101111111',\n     '0000000001111110010000010100000101000001011111100100000101111110',\n     '0000000001000000010000000111111101000001010000010100000101111111',\n     '0000000001111110010000010111111001000001010000010100000101111110',\n     '0000000001111111010000010100000101001110010000010100000101111111',\n     '0000000001111110010000100100001001111111010000010100000101111111',\n     '0000000001011000011001000100001001111110010000010100000101111110',\n     '0000000001111110010000010100000101111110010000010100001101111110',\n     '0000000001111111010000110101110101000011010111010100001101111111' ],\n  C:\n   [ '0000000000111110010000010100000001000000010000000100000100111110',\n     '0000000001111111011111110111111101100000011111110111111101111111',\n     '0000000001111111011111110110001101100000011000110111111101111111',\n     '0000000001111110010011110100111101000000010011110100111101111110',\n     '0000000001111111010001110100011101000000010000000100011101111111',\n     '0000000001111111010000000100000001000000010000000100000001111111',\n     '0000000001111111011111010111110001111100011111010111110101111111',\n     '0000000001111111010000010100000101000000010000000100000101111111',\n     '0000000001111111010000010101111101010000010111110100000101111111' ],\n  D:\n   [ '0000000001111110011111110110001101100011011000110111111101111110',\n     '0000000001111100010000100100000101000001010000010100001001111100',\n     '0000000001111000010001000100001001000001010000100100010001111000',\n     '0000000001111100010000100101100101011101010110010100001001111100',\n     '0000000000000001000000010000000100000001011111110100000101111111',\n     '0000000001111100011100100111000101110001011100010111001001111100',\n     '0000000000000001000000010111111101000001010000010100000101111111',\n     '0000000001111110010000010100000101000001010000010100000101111110',\n     '0000000000000001000000010000000101111111011100010111000101111111' ],\n  E:\n   [ '0000000000011111011100000101000001011111010000000100000001111111',\n     '0000000000111111011000000101000001001111010000000100000001111111',\n     '0000000001111111010000000111111101111111011111110100000001111111',\n     '0000000001111111011111100111111001111111011111100111111001111111',\n     '0000000001111111010000000100000001111111010000000100000001111111',\n     '0000000001111111010000000111111101000000011111110111111101111111',\n     '0000000000011111000100000001000001111110010000000100000001111111',\n     '0000000000011100001000100100000101111111010000000010001000011100',\n     '0000000000011111001000000100000001111111010000000010000000011111' ],\n  F:\n   [ '0000000001111111011110110111101101111000011111110111100001111000',\n     '0000000001111111010000000100000001111111010000000100000001000000',\n     '0000000000111111011000000101000001001111010000000100000001000000',\n     '0000000001111111001000000010000000111111001000000010000001110000',\n     '0000000001111111010000010101111101000001010111110101000001110000',\n     '0000000000111111011000000100000001111110010000000100000001000000',\n     '0000000001111111011000000110000001111111011000000110000001100000',\n     '0000000000011111011100000101000001011111010000000100000001000000',\n     '0000000001111111011111110111111101111111010000000111111101000000' ],\n  G:\n   [ '0000000001111111010000010101111101010001010111010100000101111111',\n     '0000000000111110010000000100000001001110010000010100000100111110',\n     '0000000001111111011110000111100001111011011110010111100101111111',\n     '0000000001111111010000000100000001001111010000010100000101111111',\n     '0000000000111110010000010100000001011111010000010100000100111110',\n     '0000000000011100001000100100000001011111010000010010001000011100',\n     '0000000001111111010000000100000001011111010001000100010001111100',\n     '0000000001111111011111110111111101110000011101110111000101111111',\n     '0000000001111111010000010100000101000001011111110000000101111111' ],\n  H:\n   [ '0000000001000001011111110111111101111111011111110111111101000001',\n     '0000000001100000011000000111111101111111011000110110001101100011',\n     '0000000001111111010111010101110101000001010111010101110101111111',\n     '0000000001000001010000010100000101111111010000010100000101000001',\n     '0000000001110111011101110111011101111111011101110111011101110111',\n     '0000000001000000010000000100000001111110010000010100000101000001',\n     '0000000001110001011100010111000101111111011100010111000101110001',\n     '0000000001111101011111010111110101111101011111110111110101111101',\n     '0000000001000001010000010111111101111111011111110100000101000001' ],\n  I:\n   [ '0000000000001000000000000000100000001000000010000000100001111111',\n     '0000000001111111000111000001110000011100000111000001110001111111',\n     '0000000001111111000010000000100000001000011111110111111101111111',\n     '0000000000001000000000000111111100001000000010000000100001111111',\n     '0000000001111111000010000000100000001000000010000000100001111111',\n     '0000000001111111011111110000100000001000000010000111111101111111',\n     '0000000001111111010000010111011101110111011101110100000101111111',\n     '0000000001111111000000000111111101111111011111110111111101111111',\n     '0000000001111111010000010111011100010100011101110100000101111111' ],\n  J:\n   [ '0000000001111111010000010111011101110111011101110100011101111111',\n     '0000000001111111011111110111111100011100011111000111110001111100',\n     '0000000001111111000111000001110000011100000111000001110001111100',\n     '0000000001111111000010000000100000001000010010000100100001111000',\n     '0000000001111111000111000001110000011100010111000101110000111000',\n     '0000000001111111011111110111111100001000000010000000100001111000',\n     '0000000001111111000010000000100000001000010010000100100000111000',\n     '0000000000011111000000000001111100011111000111110001111101111111',\n     '0000000001111111000010000000100000001000000010000000100001111000' ],\n  K:\n   [ '0000000001111010011110100111101001111111011110010111100101111001',\n     '0000000001111001011110100111110001111010011110010111100101111001',\n     '0000000001000001010000100100010001111000010001000100001001000001',\n     '0000000001111111010111010101101101000111010110110101110101111111',\n     '0000000001100011011001100110110001111000011011000110011001100011',\n     '0000000001110111011101110111011001111100011101100111011101110111',\n     '0000000001100110011001100111111001111111011000110110001101100011',\n     '0000000001000001010000010100011101111000010001110100000101000001',\n     '0000000001000100010001000100010001111111010000010100000101000001' ],\n  L:\n   [ '0000000001100000011000000110000001100000011000000111111101111111',\n     '0000000001111000010010000100100001001111010000010100000101111111',\n     '0000000001111111010111110101111101011111010111110100000101111111',\n     '0000000001111110011111100111111001111110011111100111111001111111',\n     '0000000001000000010000000100000001000000011111110111111101111111',\n     '0000000001000000010000000100000001000000010000000100000001111111',\n     '0000000001000000010000000100000001000000010000000010000000011111',\n     '0000000001110000010100000101000001010000010011110010000100011111',\n     '0000000001111000011110000111100001111000011110000111100001111111' ],\n  M:\n   [ '0000000001110111011111110110101101100011011000110110001101100011',\n     '0000000001111111010111010100100101010101010111010101110101111111',\n     '0000000001110111011101110111111101001001010010010100000101000001',\n     '0000000000111010011101010111000101110001011100010111000101110001',\n     '0000000001111111011111110111111101111111011010110110101101101011',\n     '0000000001110111010010010100100101001001010010010100000101000001',\n     '0000000001110111010111010100100101001001010000010100000101000001',\n     '0000000000110110010111010100100101000001010000010100000101000001',\n     '0000000001111111010010010100100101001001010010010100100101001001' ],\n  N:\n   [ '0000000000111110011111110110001101100011011000110110001101100011',\n     '0000000001111111010011010101010101010101010101010101100101111111',\n     '0000000001111110010000010100000101000001010000010100000101000001',\n     '0000000001100011011100110111101101111111011011110110011101100011',\n     '0000000001000001011000010101000101001001010001010100001101000001',\n     '0000000001111111011111010111110101111101011111010111110101111101',\n     '0000000001111111010000010100000101000001010000010100000101000001',\n     '0000000000111110010011110100111101001111010011110100111101001111',\n     '0000000001111111010000010100000101001001010010010100100101111111' ],\n  O:\n   [ '0000000000111110011100110111001101110011011100110111001100111110',\n     '0000000001111111011100010111000101110001011100010111000101111111',\n     '0000000001111111011000110110001101100011011000110110001101111111',\n     '0000000000111110011111110111111101110111011111110111111100111110',\n     '0000000000111110010000010100000101000001010000010100000100111110',\n     '0000000001111111011011110110111101101111011111110111111101111111',\n     '0000000001111111010000010100000101000001010000010100000101111111',\n     '0000000001111111010000010100000101111111011111110111111101111111',\n     '0000000001111111010000010101110101011101010111010100000101111111' ],\n  P:\n   [ '0000000001111111011111110111111101111111010000010111111101000000',\n     '0000000001111111011111110110001101100011011111110111111101100000',\n     '0000000001111111010000010111111101000000010000000100000001000000',\n     '0000000001111111010000010101110101000001010111110101111101111111',\n     '0000000000111110010000010100000101000001010000010111111001000000',\n     '0000000001111111010000010100000101111111010000000100000001000000',\n     '0000000001111111010000010100110101000001010011110100100001111000',\n     '0000000000111110010000010100000101111110010000000100000001000000',\n     '0000000001111111011100010111000101110001011111110111000001110000' ],\n  Q:\n   [ '0000000001111111010000010100000101001001010010010100100101110111',\n     '0000000001111111010000010100000101000001010001010100010101111111',\n     '0000000001111111011111110110001101111111011111110000001100000011',\n     '0000000001111111011100010111000101110001011101010111010101111111',\n     '0000000000111110011111110111111101110001011101010111010100111110',\n     '0000000001111111010000010100000101111111000000010000000100000001',\n     '0000000000111110010000010100000101000001010001010100010100111110',\n     '0000000001111111010000010101110101011101010101010100000101111111',\n     '0000000001111111011111110100001101000011010010110100011101111111' ],\n  R:\n   [ '0000000001111111010000010101110101010001010101110100011101111111',\n     '0000000001111111010000010101111101011111010111110101111101111111',\n     '0000000001111110010000100100001001111111010000010100000101000001',\n     '0000000001111111011111110110000001100000011000000110000001100000',\n     '0000000000111100010000100100001001111111010000010100000101000001',\n     '0000000000111110011100010111000101111110011100100111001001110011',\n     '0000000001111111010001110101011101000001010111010101110101111111',\n     '0000000001111110011111100110011001111111011111110110001101100011',\n     '0000000000111111011111110110000001100000011000000110000001100000' ],\n  S:\n   [ '0000000000111111010000000100000001111111000000010000000101111110',\n     '0000000001111111010000000100000001000000011111110000000101111111',\n     '0000000000111111011110000111100000111110000011110000111101111110',\n     '0000000001111111011110000111100001111111000011110000111101111111',\n     '0000000001111111010000010101111101000001011111010100000101111111',\n     '0000000001111111011111110100000001111111000000110111111101111111',\n     '0000000001111111011111110111111101000000011111110000000101111111',\n     '0000000001111111010000000111111100000011011111110111111101111111',\n     '0000000001111111010000000100000001111111000000010000000101111111' ],\n  T:\n   [ '0000000001111111011111110001110000011100000111000001110000011100',\n     '0000000001111111010000010101110101001001011010110110001101111111',\n     '0000000001111111010010010000100000001000000010000000100000011100',\n     '0000000001111111000010000000100000001000000010000000100000001000',\n     '0000000001111111010000010111011101110111011101110111011101111111',\n     '0000000000010000000100000111111100010000000100000001000000011111',\n     '0000000001111111011001110100000101100111011001110110000101111111',\n     '0000000001111111010000010111011100010100000101000001010000011100',\n     '0000000001111111011111110111111100011100000111000001110000011100' ],\n  U:\n   [ '0000000001110111011101110111011101110111011101110111011101111111',\n     '0000000001110001011100010111000101110001011100010111000101111111',\n     '0000000001111111010010010100100101001001010000010100000101111111',\n     '0000000001000001010000010100000101000001011111110111111101111111',\n     '0000000001100011011000110110001101100011011000110111111101111111',\n     '0000000001000001010000010100000101000001010000010100000101111111',\n     '0000000001111111010111010101110101011101010111010100000101111111',\n     '0000000001111101011111010111110101111101011111010111110101111111',\n     '0000000001110111011101110111011101110111011111110111111101111111' ],\n  V:\n   [ '0000000001100011011000110110001101100011011101110111011100011100',\n     '0000000001111111010010010100100101001001011000110111011101111111',\n     '0000000001000001010000010100000101100011001000100011011000001000',\n     '0000000001110111011101110111011101110111001101100001010000001000',\n     '0000000001111111010111010101110101101011011010110111011101111111',\n     '0000000001000001010000010100000101000001010000010111011100001000',\n     '0000000001100011011000110110001101100011011000110011011000001000',\n     '0000000001110111011101110111011101110111011111110011111000011100',\n     '0000000001100011011000110110001101110111011111110011111000011100' ],\n  W:\n   [ '0000000001000001010000010100100101001001010010010100100101110111',\n     '0000000001001001010010010100100101001001010010010100100101111111',\n     '0000000001000001010000010100000101000001010010010101110100110110',\n     '0000000001000001010000010100100101001001011111110111011101110111',\n     '0000000001111111010111010101110101010101010010010101110101111111',\n     '0000000001101011011010110110101101111111011111110111111101111111',\n     '0000000001000111010001110100011101000111010001110101011100101110',\n     '0000000001000001010000010100000101001001010010010101110101110111',\n     '0000000001100011011000110110001101100011011010110111111101110111' ],\n  X:\n   [ '0000000001111111010111010110101101110111011010110101110101111111',\n     '0000000001100011011000110111011100001000011101110110001101100011',\n     '0000000001000001010000010111011100011100011101110100000101000001',\n     '0000000001100011011101110011111000011100001111100111011101100011',\n     '0000000001111111010111010100100101100011010010010101110101111111',\n     '0000000001110111011101110011111000011100001111100111011101110111',\n     '0000000001000001010000010010001000011100001000100100000101000001',\n     '0000000001000001001000100001010000001000000101000010001001000001',\n     '0000000001000001010000010100000100111110010000010100000101000001' ],\n  Y:\n   [ '0000000001111111010111010101110101000001011111010100000101111111',\n     '0000000001000001010000010100000101111111000000010000000101111111',\n     '0000000001111111010111010101110101000001011101110110001101111111',\n     '0000000001000001010000010100000101111111000010000000100000011100',\n     '0000000001000001010000010010001000010100000010000000100000011100',\n     '0000000001100011011000110111111101111111000000110111111101111111',\n     '0000000001001111010011110100111101111111000011110000111101111111',\n     '0000000001000001010000010111111100001000011111110111111101111111',\n     '0000000001100011011000110110001100111111000000110000001100111110' ],\n  Z:\n   [ '0000000001111111010000010111110101000001010111110100000101111111',\n     '0000000001111111000000110000011000001000001100000110000001111111',\n     '0000000001111111000000010000000100111111010000000100000000111111',\n     '0000000001111111000001110001110001110000011111110111111101111111',\n     '0000000001111110000000110000001101111111011000000110000000111111',\n     '0000000001111111010000010111110101100011010111110100000101111111',\n     '0000000001111111000000110000011000001000001100000110000001111111',\n     '0000000001111111000000010000000101111111010000000100000001111111',\n     '0000000001111111000000010000000100000001011111110100000001111111' ],\n  ' ': ['0000000000000000000000000000000000000000000000000000000000000000']\n   }\n"
  ]
}